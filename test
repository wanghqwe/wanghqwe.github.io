我的博客
1.行内元素有哪些?块级元素有哪些? 空(void)元素有那些?
   
行内元素：a、b、span、img、input、strong、select、label、em、button、textarea
　　块级元素：div、ul、li、dl、dt、dd、p、h1-h6、blockquote
　　空元素：即系没有内容的HTML元素，例如：br、meta、hr、link、input、img

2. 什么叫优雅降级和渐进增强?
   
渐进增强 progressive enhancement：
　　针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进和追加功能达到更好的用户体验。
　　优雅降级 graceful degradation：
　　一开始就构建完整的功能，然后再针对低版本浏览器进行兼容。
　　区别：
　　a. 优雅降级是从复杂的现状开始，并试图减少用户体验的供给
　　b. 渐进增强则是从一个非常基础的，能够起作用的版本开始，并不断扩充，以适应未来环境的需要
　　c. 降级(功能衰减)意味着往回看;而渐进增强则意味着朝前看，同时保证其根基处于安全地带

3. Doctype作用? 严格模式与混杂模式-如何触发这两种模式，区分它们有何意义?
  
  （1）、<!DOCTYPE> 声明位于文档中的最前面，处于 <html> 标签之前。告知浏览器的解析器，用什么文档类型 规范来解析这个文档。
    （2）、严格模式的排版和 JS 运作模式是  以该浏览器支持的最高标准运行。
    （3）、在混杂模式中，页面以宽松的向后兼容的方式显示。模拟老式浏览器的行为以防止站点无法工作。
    （4）、DOCTYPE不存在或格式不正确会导致文档以混杂模式呈现。


4.CSS的盒子模型？

（1）两种， IE 盒子模型、标准 W3C 盒子模型；IE 的content部分包含了 border 和 pading;
（2）W3C盒模型： 内容(content)、填充(padding)、边界(margin)、 边框(border).

5.CSS 选择符有哪些？哪些属性可以继承？优先级算法如何计算？ CSS3新增伪类有那些？
      
 1.id选择器（ # myid）
        2.类选择器（.myclassname）
        3.标签选择器（div, h1, p）
        4.相邻选择器（h1 + p）
        5.子选择器（ul < li）
        6.后代选择器（li a）
        7.通配符选择器（ * ）
        8.属性选择器（a[rel = "external"]）
        9.伪类选择器（a: hover, li: nth - child）

1.最高优先级是 (直接在标签中的设置样式，假设级别为1000)<div style="color:Red;"></div>

  2.次优先级是（ID选择器 ,假设级别为100）  #myDiv{color:Red;}

  3.其次优先级是（类选择器，假设级别为10） .divClass{color:Red;}

  4.最后优先级是 （标签选择器，假设级别是 1）  div{color:Red;}

  5.那么后代选择器的优先级就可以计算了啊

  比如 .divClass  span { color:Red;}  优先级别就是：10+1=11

 可继承： font-size font-family color, UL LI DL DD DT;
 不可继承 ：border padding margin width height ;
    p:first-of-type 选择属于其父元素的首个 <p> 元素的每个 <p> 元素。
    p:last-of-type  选择属于其父元素的最后 <p> 元素的每个 <p> 元素。
    p:only-of-type  选择属于其父元素唯一的 <p> 元素的每个 <p> 元素。
    p:only-child    选择属于其父元素的唯一子元素的每个 <p> 元素。
    p:nth-child(2)  选择属于其父元素的第二个子元素的每个 <p> 元素。
    :enabled、:disabled 控制表单控件的禁用状态。
    :checked，单选框或复选框被选中。

6.语义化的理解？

1，去掉或者丢失样式的时候能够让页面呈现出清晰的结构
2，有利于SEO：和搜索引擎建立良好沟通，有助于爬虫抓取更多的有效信息：爬虫依赖于标签来确定上下文和各个关键字的权重；
3，方便其他设备解析（如屏幕阅读器、盲人阅读器、移动设备）以意义的方式来渲染网页；
4，便于团队开发和维护，语义化更具可读性，是下一步吧网页的重要动向，遵循W3C标准的团队都遵循这个标准，可以减少差异化。

7. 前端开发的优化问题（看雅虎14条性能优化原则）。
- [内容]尽量减少HTTP请求数
- [服务器]使用CDN（Content Delivery Network）
- [服务器]添上Expires或者Cache-Control HTTP头
- [服务器]Gzip组件
- [css]把样式表放在顶部
- [js]把脚本放在底部
- [css]避免使用CSS表达式
- [js, css]把JavaScript和CSS放到外面
- [内容]减少DNS查找
- [js, css]压缩JavaScript和CSS
- [内容]避免重定向
- [js]去除重复脚本
- [服务器]配置ETags
- [内容]让Ajax可缓存
- [服务器]尽早清空缓冲区
- [服务器]对Ajax用GET请求
- [内容]延迟加载组件
- [内容]预加载组件
- [内容]减少DOM元素的数量
- [内容]跨域分离组件
- [内容]尽量少用iframe
- [内容]杜绝404
- [cookie]给Cookie减肥
- [cookie]把组件放在不含cookie的域下
- [js]尽量减少DOM访问
- [js]用智能的事件处理器
- [css]选择 舍弃@import
- [css]避免使用滤镜
- [图片]优化图片
- [图片]优化CSS Sprite
- [图片]不要用HTML缩放图片
- [图片]用小的可缓存的favicon.ico（P.S. 收藏夹图标）
- [移动端]保证所有组件都小于25K
- [移动端]把组件打包到一个复合文档里
- [服务器]避免图片src属性为空

	1. 


8.CSS中link 和@import的区别是？

(1) link属于HTML标签，而@import是CSS提供的;
(2) 页面被加载的时，link会同时被加载，而@import被引用的CSS会等到引用它的CSS文件被加载完再加载;
(3) import只在IE5以上才能识别，而link是HTML标签，无兼容问题;
(4) link方式的样式的权重 高于@import的权重.

9.数组去重
var ary = [1, 2, 3, 1, 2, 3];
var obj = {};
for (var i = 0; i < ary.length; i++) {
    var cur = ary[i];
    if (obj[cur] === cur) {
        //如果要删除当前项，就可以去数组中拿一个没有比较过的项进行补位
        ary[i] = ary[ary.length - 1];
        ary.length--;
        i--;
        continue;
    }
    obj[cur] = cur;
}
console.log(ary);
10.冒泡排序
var ary = [9, 1, 2, 3];
var flag = false;
for (var i = 0; i < ary.length - 1; i++) {
    for (var j = 0; j < ary.length - 1 - i; j++) {
        if (ary[j] > ary[j + 1]) {
            var temp = ary[j];
            ary[j] = ary[j + 1];
            ary[j + 1] = temp;
            flag = true;
        }
    }
    if (flag == true) {
        flag = false;
    } else {
        break;
    }
}
console.log(ary);

11.浏览器本地存储：”
在较高版本的浏览器中，js提供了sessionStorage和globalStorage。在HTML5中提供了localStorage来取代globalStorage。
Html5中的Web Storage包括了两种存储方式：sessionStorage和localStorage。

	1. 
		1. sessionStorage：用于本地存储一个会话（session）中的数据，这些数据只有在同一个会话中的页面才能访问并且当会话结束后数据也随之销毁。因此sessionStorage不是一种持久化的本地存储，仅仅是会话级别的存储。
		2. localStorage用于持久化的本地存储，除非主动删除数据，否则数据是永远不会过期的。


web storage和cookie的区别
Web Storage的概念和cookie相似，区别是它是为了更大容量存储设计的。Cookie的大小是受限的，并且每次你请求一个新的页面的时候Cookie都会被发送过去，这样无形中浪费了带宽，另外cookie还需要指定作用域，不可以跨域调用。
除此之外，Web Storage拥有setItem,getItem,removeItem,clear等方法，不像cookie需要前端开发者自己封装setCookie，getCookie。
但是cookie也是不可以或缺的：cookie的作用是与服务器进行交互，作为HTTP规范的一部分而存在 ，而Web Storage仅仅是为了在本地“存储”数据而生
cookie 和session 的区别：
 1、cookie数据存放在客户的浏览器上，session数据放在服务器上。
 2、cookie不是很安全，别人可以分析存放在本地的COOKIE并进行COOKIE欺骗
    考虑到安全应当使用session。
 3、session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能
     考虑到减轻服务器性能方面，应当使用COOKIE。
 4、单个cookie保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie。
 5、所以个人建议：
    将登陆信息等重要信息存放为SESSION
    其他信息如果需要保留，可以放在COOKIE中
12. display:none和visibility:hidden的区别？
display:none  隐藏对应的元素，在文档布局中不再给它分配空间，它各边的元素会合拢，就当他从来不存在。
visibility:hidden  隐藏对应的元素，但是在文档布局中仍保留原来的空间。
     13.经常遇到的浏览器兼容性有哪些？原因，解决方法是什么？阐述clear：both的意义？
- - 不同浏览器，很多标签的默认样式不同，如默认的margin，padding，利用reset。Css文件进行样式清除，然后在根据需要进行设置。
- - 横向双倍外边距，块级元素float只有，如果有外边距的话，ie6的margin比设置的大，display：inline
- - Img外部的border，如果img标签外部有a标签，会有border（ie），设置img{border：none}
- - 如果img标签html里面写的时候换行了，会有默认的间隙，float
- - 默认行高，如果清楚浮动的时候，div class=‘clear’会有默认的行高，如果是ie67，height；，overflow；            hidden，clear：both
- - Input标签，不同浏览器会有一个不同的焦点，outline；none；
- - 子元素无法撑开富元素，overflow：hidden；   或者height，或者子元素后面设置height：0；clear：both；
- - 透明度rgba（），opacity；  filter：alpha（opacity=）清除浮动，如果一个父元素设置高度的话，可以overflow：hidden如果设置overflow：hidden，可以不设置高度，子元素自动撑开；或者给下一个元素设置clear：both也可以清除上一个元素带来的浮动影响
- - 默认行高，ie6-7，如果你设置的文字的高度超出盒子模型设置的内容的高度，会影响布局，给超出高度的边框设置overflow：hidden，或者将文字的行高小于盒子的高度
14. RequireJS 是一个前端的模块化管理的工具库，遵循AMD规范

requireJS 的基本思想为：通过一个函数来将所有所需要的或者说所依赖的模块实现装载进来，然后返回一个新的函数（模块），我们所有的关于新模块的业务代码都在这个函数内部操作，其内部也可无限制的使用已经加载进来的以来的模块。

15.AMD和CMD区别：

    1. 对于依赖的模块，AMD 是提前执行，CMD 是延迟执行。不过 RequireJS 从 2.0 开始，也改成可以延迟执行（根据写法不同，处理方式不同）。CMD 推崇 as lazy as possible.
    2. CMD 推崇依赖就近，AMD 推崇依赖前置。
    3. AMD 的 API 默认是一个当多个用，CMD 的 API 严格区分，推崇职责单一。比如 AMD 里，require 分全局 require 和局部 require，都叫 require。CMD 里，没有全局 require，而是根据模块系统的完备性，提供 seajs.use 来实现模块系统的加载启动。CMD 里，每个 API 都简单纯粹。


16.jquery中on,live和bind的区别
1、.bind()是直接绑定在元素上，也很好的解决了浏览器在事件处理中的兼容问题。
2、.live()则是通过冒泡的方式来绑定到元素上的。更适合列表类型的，绑定到document DOM节点上。
3、.on()则是最新的1.9版本整合了之前的三种方式的新事件绑定机制。
js是什么，js和html 的开发如何结合

js 全写就是javascript，是一种脚本语言。它一共由三个部分组成。分别是DOM，BOM，ECMAscript，

HTML 是超文本标记语言。HTML里的每一个标签就是JS里面的DOM节点。

JS操作DOM节点就是在操作HTML的标签，这样它们俩就结合到一起了。
一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么？（流程说的越详细越好）

  注：这题胜在区分度高，知识点覆盖广，再不懂的人，也能答出几句，
  而高手可以根据自己擅长的领域自由发挥，从URL规范、HTTP协议、DNS、CDN、数据库查询、
  到浏览器流式解析、CSS规则构建、layout、paint、onload/domready、JS执行、JS API绑定等等；

  详细版：
    1、浏览器会开启一个线程来处理这个请求，对 URL 分析判断如果是 http 协议就按照 Web 方式来处理;
    2、调用浏览器内核中的对应方法，比如 WebView 中的 loadUrl 方法;
    3、通过DNS解析获取网址的IP地址，设置 UA 等信息发出第二个GET请求;
    4、进行HTTP协议会话，客户端发送报头(请求报头);
    5、进入到web服务器上的 Web Server，如 Apache、Tomcat、Node.JS 等服务器;
    6、进入部署好的后端应用，如 PHP、Java、JavaScript、Python 等，找到对应的请求处理;
    7、处理结束回馈报头，此处如果浏览器访问过，缓存上有对应资源，会与服务器最后修改时间对比，一致则返回304;
    8、浏览器开始下载html文档(响应报头，状态码200)，同时使用缓存;
    9、文档树建立，根据标记请求所需指定MIME类型的文件（比如css、js）,同时设置了cookie;
    10、页面开始渲染DOM，JS根据DOM API操作DOM,执行事件绑定等，页面显示完成。

  简洁版：
    浏览器根据请求的URL交给DNS域名解析，找到真实IP，向服务器发起请求；
    服务器交给后台处理完成后返回数据，浏览器接收文件（HTML、JS、CSS、图象等）；
    浏览器对加载到的资源（HTML、JS、CSS等）进行语法解析，建立相应的内部数据结构（如HTML的DOM）；
    载入解析到的资源文件，渲染页面，完成。

js中解决跨域的方式：

jsonp、window.name、document.domain、window.postMessage

jsonp的原理：
JSONP就是利用了SCRIPT的这个原理
  1)我们首先把需求请求数据的，那个跨域的API数据接口的地址，赋值给SCRIPT的SRC
  2)把当前页面中的某一个函数名当做参数值，传递给腾讯的服务器(URL问号传参:?callback=fn)
  3)腾讯服务器接收到你的请求后，需要进行特殊的处理：把你传递进来的函数名和它需要给你的数据拼接成一个字符串 例如:我们传递进去的函数名是fn，它准备好的数据是 'fn([{"name":"zhufeng"}])' -> '我传递的函数名(需要给我们的数据)'
  4)最后腾讯的服务器把准备的数据通过HTTP协议返回给我们客户端，客户端发现其实就是让我们的fn执行，而且还给fn传递了一堆的数据，那些数据就是我们想要的

什么是CSS Hack?

一般来说是针对不同的浏览器写不同的CSS,就是 CSS Hack。
IE浏览器Hack一般又分为三种，条件Hack、属性级Hack、选择符Hack（详细参考CSS文档：css文档）。例如：

    // 1、条件Hack
   <!--[if IE]>
      <style>
            .test{color:red;}
      </style>
   <![endif]-->
   // 2、属性Hack
    .test{
    color:#090\9; /* For IE8+ */
    *color:#f00;  /* For IE7 and earlier */    _color:#ff0;  /* For IE6 and earlier */
    }
   // 3、选择符Hack
    * html .test{color:#090;}       /* For IE6 and earlier */
    * + html .test{color:#ff0;}     /* For IE7 */

实现一个函数clone，可以对JavaScript中的5种主要的数据类型（包括Number、String、Object、Array、Boolean）进行值复制。

    /** * 对象克隆 * 支持基本数据类型及对象 * 递归方法 */
function clone(obj) {
    var o;
    switch (typeof obj) {
        case "undefined":
            break;
        case "string":
            o = obj + "";
            break;
        case "number":
            o = obj - 0;
            break;
        case "boolean":
            o = obj;
            break;
        case "object": // object 分为两种情况 对象（Object）或数组（Array）
            if (obj === null) {
                o = null;
            } else {
                if (Object.prototype.toString.call(obj).slice(8, -1) === "Array") {
                    o = [];
                    for (var i = 0; i < obj.length; i++) {
                        o.push(clone(obj[i]));
                    }
                } else {
                    o = {};
                    for (var k in obj) {
                        o[k] = clone(obj[k]);
                    }
                }
            }
            break;
        default:
            o = obj;
            break;
    }
    return o;}


js延迟加载的方式有哪些？
defer和async、动态创建DOM方式（创建script，插入到DOM中，加载完毕后callBack）、按需异步载入js

同步和异步的区别?
同步的概念应该是来自于OS中关于同步的概念:不同进程为协同完成某项工作而在先后次序上调整(通过阻塞,唤醒等方式).同步强调的是顺序性.谁先谁后.异步则不存在这种顺序性.
同步：浏览器访问服务器请求，用户看得到页面刷新，重新发请求,等请求完，页面刷新，新内容出现，用户看到新内容,进行下一步操作。
异步：浏览器访问服务器请求，用户正常操作，浏览器后端进行请求。等请求完，页面不刷新，新内容也会出现，用户看到新内容。


documen.write和 innerHTML的区别
  document.write只能重绘整个页面

  innerHTML可以重绘页面的一部分
